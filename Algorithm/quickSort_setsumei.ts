import { quickSort } from "./quickSort.js";

const arr = [4,3,2,1];

console.log(arr); // [4,3,2,1]

quickSort(arr, 0);

console.log(arr); // [1,2,3,4]

/*
	arr = [4,3,2,1] の場合...

	arr = [1,3,2,4]
	arr = [1,2,3,4]

	ここで「if(2 >= 1){break;}」となりiとjが交差し入れ替える要素が無くなるのでbreak
	
	ここからまず[(1,2),3,4]の左側のブロックを入れ替えられるかチェックするため
	「if(i - begin >= 2)」の方のifブロックに入り
	「quickSortRec(arr, 0, 1, 0)」としてクイックソートを呼ぶ

	入れ替えようとするが既に[1,2]とソート済み
	再び「if(0 >= 0){break;}」 となり入れ替えられる要素が無くなるのでbreak
	iもjも0なので「if(i - begin >= 2)」も「if(end - j >= 2)」も満たさない。よって左側ブロックは全て入れ替えたので
	再帰を抜ける。

	今度は[1,2,(3,4)]の右側のブロックを入れ替えられるかチェックするため
	「if(end - j >= 2)」の方のifブロックに入り
	「quickSortRec(arr, 2, 3, 0)」としてクイックソートを呼ぶ

	入れ替えようとするが既に[3,4]とソート済み
	再び「if(2 >= 2){break;}」 となり入れ替えられる要素が無くなるのでbreak
	i = j = 2, begin = 2, end = 3 で
	「if(i - begin >= 2)」も「if(end - j >= 2)」も満たさない。よって右側ブロックは全て入れ替えたので
	再帰を抜ける。

	左右のブロックどちらともこれ以上ブロックとして分けられないのでソートが終了し関数を抜ける

	よって
	arr = [4,3,2,1] が
	arr = [1,2,3,4] にソートできた
*/